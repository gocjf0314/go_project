//
//해당 파일 수정시 아래 command line 실행
//
//protoc -I=. \
//--go_out . --go_opt paths=source_relative \
//--go-grpc_out . --go-grpc_opt paths=source_relative \
//proto/message/message.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_InsertData_FullMethodName   = "/message.MessageService/InsertData"
	MessageService_GetData_FullMethodName      = "/message.MessageService/GetData"
	MessageService_RequestMsg_FullMethodName   = "/message.MessageService/RequestMsg"
	MessageService_SendData_FullMethodName     = "/message.MessageService/SendData"
	MessageService_GetMsgFromDB_FullMethodName = "/message.MessageService/GetMsgFromDB"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// Insert requested data to database
	InsertData(ctx context.Context, in *InsertMsg, opts ...grpc.CallOption) (*InsertReponse, error)
	// Get data from database
	GetData(ctx context.Context, in *GetMsg, opts ...grpc.CallOption) (*GetResponse, error)
	// Client request message to server
	RequestMsg(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error)
	// Client send index data to listner
	SendData(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error)
	// Listner send index to server then Get Msg
	GetMsgFromDB(ctx context.Context, in *ListenerReq, opts ...grpc.CallOption) (*ListenerRes, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) InsertData(ctx context.Context, in *InsertMsg, opts ...grpc.CallOption) (*InsertReponse, error) {
	out := new(InsertReponse)
	err := c.cc.Invoke(ctx, MessageService_InsertData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetData(ctx context.Context, in *GetMsg, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, MessageService_GetData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RequestMsg(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error) {
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, MessageService_RequestMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendData(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error) {
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, MessageService_SendData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMsgFromDB(ctx context.Context, in *ListenerReq, opts ...grpc.CallOption) (*ListenerRes, error) {
	out := new(ListenerRes)
	err := c.cc.Invoke(ctx, MessageService_GetMsgFromDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// Insert requested data to database
	InsertData(context.Context, *InsertMsg) (*InsertReponse, error)
	// Get data from database
	GetData(context.Context, *GetMsg) (*GetResponse, error)
	// Client request message to server
	RequestMsg(context.Context, *RequestData) (*ResponseData, error)
	// Client send index data to listner
	SendData(context.Context, *RequestData) (*ResponseData, error)
	// Listner send index to server then Get Msg
	GetMsgFromDB(context.Context, *ListenerReq) (*ListenerRes, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) InsertData(context.Context, *InsertMsg) (*InsertReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertData not implemented")
}
func (UnimplementedMessageServiceServer) GetData(context.Context, *GetMsg) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMessageServiceServer) RequestMsg(context.Context, *RequestData) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMsg not implemented")
}
func (UnimplementedMessageServiceServer) SendData(context.Context, *RequestData) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedMessageServiceServer) GetMsgFromDB(context.Context, *ListenerReq) (*ListenerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgFromDB not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_InsertData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).InsertData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_InsertData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).InsertData(ctx, req.(*InsertMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetData(ctx, req.(*GetMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RequestMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RequestMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_RequestMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RequestMsg(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendData(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMsgFromDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetMsgFromDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_GetMsgFromDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetMsgFromDB(ctx, req.(*ListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertData",
			Handler:    _MessageService_InsertData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _MessageService_GetData_Handler,
		},
		{
			MethodName: "RequestMsg",
			Handler:    _MessageService_RequestMsg_Handler,
		},
		{
			MethodName: "SendData",
			Handler:    _MessageService_SendData_Handler,
		},
		{
			MethodName: "GetMsgFromDB",
			Handler:    _MessageService_GetMsgFromDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message/message.proto",
}
